const Account = require('../controllers/account')
const Source = require('../controllers/source')
const Task = require('../controllers/task')
const actions = require('../actions')

module.exports = (event, state, map, send) => {
  // List of accounts
  event.on('account:list', async (msg, action, next) => {
    try {
      const list = await Account.list(msg.from.id)
      if (list === null) {
        throw new Error(`There are no accounts for ${msg.from.id}`)
      }

      // Sending the list of accounts
      const elements = list.map(item => item.login)
      send.keyboard(msg.from.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç', [
        ...elements,
        '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
        '–ù–∞–∑–∞–¥'
      ])

      next && next()
    } catch (e) {
      event.emit('account:empty', msg)
      next && next()
    }
  })

  // No accounts added
  event.on('account:empty', (msg, action, next) =>
    send.keyboard(msg.from.id, '–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞', [
      '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
      '–ù–∞–∑–∞–¥'
    ])
  )

  // Add account
  event.on('account:add', (msg, action, next) => {
    send.keyboard(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª', ['–ù–∞–∑–∞–¥'])
    next && next()
  })

  // Waiting for Account Login
  event.on('account:await', (msg, action, next) => {
    try {
      const account = msg.text.split(' ')
      const login = account[0]
      const password = account[1]

      // Error handling
      if (account.length !== 2) throw new Error('–ù–µ –ø–µ—Ä–µ–¥–∞–Ω –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å')

      // Save the data
      event.emit('account:add:save', msg, login, password)
    } catch (e) {
      // One of the parameters is not passed
      event.emit('account:add:err', msg)
    }
  })

  // Error adding account, no username / password
  event.on('account:add:err', (msg, action, next) =>
    send.keyboard(msg.from.id, '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–æ–ª—å', ['–ù–∞–∑–∞–¥'])
  )

  // Save account
  event.on('account:add:save', async (msg, login, password) => {
    try {
      const check = await Account.containsAllUsers(login)
      if (check === null) throw new Error(`${login} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!`)

      send.message(msg.from.id, `–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø—ã—Ç–∞—é—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è`)

      try {
        // Availability check
        const auth = await actions.auth(login, password)

        // Adding to the database
        await Account.add(msg.from.id, login, password)

        send.message(
          msg.from.id,
          `üîë –ê–∫–∫–∞—É–Ω—Ç ${login} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –≤–æ–π–¥–∏—Ç–µ –≤ Instagram –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ –±—ã–ª–∏ –≤—ã`
        )
        event.emit('location:home', msg)
      } catch (e) {
        if (e.name === 'SentryBlockError') {
          send.message(
            msg.from.id,
            '‚õîÔ∏è Instagram –æ—Ç–∫–∞–∑–∞–ª –≤ –¥–æ—Å—Ç—É–ø–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
          )
        } else {
          send.message(
            msg.from.id,
            '‚õîÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è'
          )
        }
      }
    } catch (e) {
      // Account added earlier
      send.message(msg.from.id, e)
    }
  })

  // Choose an account
  event.on('account:select', async (msg, action, next) => {
    try {
      // Search for an account in the database
      const account = await Account.contains(msg.from.id, msg.text)
      if (!account) throw new Error('–ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

      send.keyboard(msg.from.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è ' + msg.text, action)
      next && next()
    } catch (e) {
      send.message(
        msg.from.id,
        `–ê–∫–∫–∞—É–Ω—Ç ${msg.text} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π`
      )
    }
  })

  // Account deleting
  event.on('account:delete', async msg => {
    const login = state[msg.from.id][state[msg.from.id].length - 1]

    try {
      // Check the existence of an account
      const account = await Account.contains(msg.from.id, login)
      if (!account) throw new Error('–ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

      try {
        // Delete
        await Account.remove(msg.from.id, login)

        send.message(msg.from.id, `–ê–∫–∫–∞—É–Ω—Ç ${login} —É–¥–∞–ª–µ–Ω`)
        event.emit('location:back', msg)
      } catch (e) {
        send.message(
          msg.from.id,
          `–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.`
        )
        event.emit('location:back', msg)
      }
    } catch (e) {
      send.message(msg.from.id, '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!')
      event.emit('location.back', msg)
    }
  })

  // Edit account
  event.on('account:edit', async (msg, action, next) => {
    try {
      send.keyboard(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª', [
        '–ù–∞–∑–∞–¥'
      ])
      next && next()
    } catch (e) {
      send.message(msg.from.id, '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!')
      event.emit('location.back', msg)
    }
  })

  // Waiting for a new password pair to be entered
  event.on('account:edit:await', (msg, action, next) => {
    try {
      const [newLogin, newPassword] = msg.text.split(' ')

      // Error handling
      if (!newLogin || !newPassword) throw new Error('–ù–µ –ø–µ—Ä–µ–¥–∞–Ω –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å')

      // Save the data
      event.emit('account:edit:save', msg, newLogin, newPassword)
    } catch (e) {
      // One of the parameters is not passed
      event.emit('account:add:err', msg)
    }
  })

  // Save
  event.on('account:edit:save', async (msg, newLogin, newPassword) => {
    try {
      const [, login] = state[msg.from.id]
      const check = await Account.containsAllUsers(login)
      if (check === null) throw new Error(`${login} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!`)

      send.message(msg.from.id, `–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø—ã—Ç–∞—é—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è`)

      try {
        // Availability check
        await actions.auth(newLogin, newPassword)

        // Adding to the database
        await Account.changeAccount(msg.from.id, login, newLogin, newPassword)

        send.message(msg.from.id, `üéâ –ê–∫–∫–∞—É–Ω—Ç ${login} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω`)
        event.emit('location:home', msg)
      } catch (e) {
        send.message(
          msg.from.id,
          '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è'
        )
      }
    } catch (e) {
      // Account added earlier
      send.message(msg.from.id, e)
    }
  })
}
