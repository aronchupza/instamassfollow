const Account = require('../controllers/account')
const Source = require('../controllers/source')
const Task = require('../controllers/task')

module.exports = (event, state, map, send) => {
  // User activity
  event.on('actions', async (msg, action, next) => {
    try {
      const list = await Account.list(msg.from.id)
      if (list === null) throw new Error('–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞')

      // Sending the list of accounts
      const elements = list.map(item => item.login)
      send.keyboard(msg.from.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç', [...elements, '–ù–∞–∑–∞–¥'])
      next && next()
    } catch (e) {
      send.keyboard(msg.from.id, '–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞', ['–ù–∞–∑–∞–¥'])
      next && next()
    }
  })

  // Output of information about the activity of the Account
  event.on('actions:account', async (msg, action, next) => {
    try {
      const account = await Account.contains(msg.from.id, msg.text)
      const task = await Task.current(msg.from.id, msg.text)

      let text = ''
      let daily = ''

      switch (task.type) {
        case '–õ–∞–π–∫ + –ü–æ–¥–ø–∏—Å–∫–∞':
          daily = Math.round(
            (task.params.actionFollow - task.params.following.length) /
              task.params.actionFollowDay
          )
          text = `–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ${task.login}\n–¢–∏–ø –∑–∞–¥–∞—á–∏: ${task.type}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${task.params.actionFollow}/${task.params.following.length}\n–ü–æ–¥–ø–∏—Å–æ–∫ –≤ –¥–µ–Ω—å: ${task.params.actionFollowDay}\n–õ–∞–π–∫–æ–≤ –≤ –¥–µ–Ω—å: ${task.params.actionLikeDay}\n–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.params.source}\n–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${daily} –¥–Ω–µ–π`
          break

        case '–û—Ç–ø–∏—Å–∫–∞':
          daily = Math.round(
            (task.params.following.length - task.params.unFollowing.length) /
              task.params.actionFollowingDay
          )
          text = `–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ${task.login}\n–¢–∏–ø –∑–∞–¥–∞—á–∏: ${task.type}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${task.params.following.length}/${task.params.unFollowing.length}\n–û—Ç–ø–∏—Å–æ–∫ –≤ –¥–µ–Ω—å: ${task.params.actionFollowingDay}\n–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${daily} –¥–Ω–µ–π`
          break

        default:
          break
      }

      send.keyboard(msg.from.id, text, ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', '–û—Ç–º–µ–Ω–∏—Ç—å', '–ù–∞–∑–∞–¥'])
      next && next()
    } catch (err) {
      send.message(msg.from.id, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è')
      next && next()
      event.emit('location:back', msg)
    }
  })

  // Cancel a task
  event.on('actions:account:cancel', async (msg, action, next) => {
    try {
      const data = state[msg.from.id]
      const account = await Account.contains(msg.from.id, data[1])
      const task = await Task.current(msg.from.id, data[1])

      await Task.cancel(task._id)
      send.message(msg.from.id, `üî¥ –ó–∞–¥–∞–Ω–∏–µ ${task.type} –æ—Ç–º–µ–Ω–µ–Ω–∞`)

      event.emit('location:back', msg)
    } catch (err) {
      send.message(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ')
      next && next()
      event.emit('location:back', msg)
    }
  })

  // Editing a task
  event.on('actions:account:update', async (msg, action, next) => {
    try {
      const account = await Account.contains(msg.from.id, state[msg.from.id][1])
      const task = await Task.current(msg.from.id, account.login)

      switch (task.type) {
        case '–û—Ç–ø–∏—Å–∫–∞':
          send.keyboard(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤ –æ—Ç–ø–∏—Å–æ–∫ –≤ –¥–µ–Ω—å', [
            '–ù–∞–∑–∞–¥'
          ])
          next()
          break

        case '–õ–∞–π–∫ + –ü–æ–¥–ø–∏—Å–∫–∞':
          send.keyboard(msg.from.id, '–°–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å?', [
            '1000',
            '3000',
            '5000',
            '7000',
            '–ù–∞–∑–∞–¥'
          ])
          next()
          break

        default:
          throw new Error('–ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è!')
          break
      }
    } catch (err) {
      event.emit('location:back', msg)
    }
  })

  // Editing processing, the first step
  event.on('actions:account:update:one', async (msg, action, next) => {
    try {
      const account = await Account.contains(msg.from.id, state[msg.from.id][1])
      const task = await Task.current(msg.from.id, account.login)

      switch (task.type) {
        case '–û—Ç–ø–∏—Å–∫–∞':
          const action = parseInt(msg.text)
          if (isNaN(action)) {
            send.message(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
            return false
          }

          // We update the count. subscriptions per day
          Task.updateActionDayUnFollowing(task._id, msg.text)
          send.message(msg.from.id, '–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')

          event.emit('location:back', msg)
          break

        case '–õ–∞–π–∫ + –ü–æ–¥–ø–∏—Å–∫–∞':
          const actionDay = parseInt(msg.text)
          if (isNaN(actionDay)) {
            send.message(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
            return false
          }

          send.keyboard(msg.from.id, '–ö —Å–∫–æ–ª—å–∫–∏–º –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Å—É—Ç–∫–∏?', [
            '500',
            '750',
            '1000',
            '1200',
            '–ù–∞–∑–∞–¥'
          ])
          next()
          break

        default:
          throw new Error('–ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è!')
          break
      }
    } catch (err) {
      event.emit('location:back', msg)
    }
  })

  event.on('actions:account:update:two', async (msg, action, next) => {
    try {
      const account = await Account.contains(msg.from.id, state[msg.from.id][1])
      const task = await Task.current(msg.from.id, account.login)

      switch (task.type) {
        case '–õ–∞–π–∫ + –ü–æ–¥–ø–∏—Å–∫–∞':
          const actionDay = parseInt(msg.text)
          if (isNaN(actionDay)) {
            send.message(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
            return false
          }

          send.keyboard(msg.from.id, '–°–∫–æ–ª—å–∫–æ –ª–∞–π–∫–æ–≤ —Å—Ç–∞–≤–∏—Ç—å?', [
            '1',
            '2',
            '3',
            '5',
            '–ù–∞–∑–∞–¥'
          ])
          next()
          break

        default:
          throw new Error('–ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è!')
          break
      }

    } catch (e) {
      event.emit('location:back', msg)
    }
  })

  event.on('actions:account:update:three', async (msg, action, next) => {
    try {
      const account = await Account.contains(msg.from.id, state[msg.from.id][1])
      const task = await Task.current(msg.from.id, account.login)

      switch (task.type) {
        case '–õ–∞–π–∫ + –ü–æ–¥–ø–∏—Å–∫–∞':
          const actionLikeDay = parseInt(msg.text)
          if (isNaN(actionLikeDay)) {
            send.message(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
            return false
          }
          // New data
          const [,,, actionFollow, actionFollowDay] = state[msg.from.id]

          // Update
          await Task.updateActionsFollowing(task._id, {
            actionFollow: actionFollow,
            actionFollowDay: actionFollowDay,
            actionLikeDay: actionLikeDay
          })
          send.message(msg.from.id, '–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')

          event.emit('location:home', msg)
          break

        default:
          throw new Error('–ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è!')
          break
      }

    } catch (e) {
      event.emit('location:back', msg)
    }
  })
}
